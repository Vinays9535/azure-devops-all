



üîπ What is Git?
----------------------

Git is a tool (a version control system).

It helps you track changes in your code (like keeping a history of edits).

You can undo mistakes, work with different versions, and collaborate with others.

Think of it like a time machine for your code.

üëâ Example:
If you write a program today, and tomorrow you mess it up, Git lets you go back to the older version.


üîπ What is GitHub?
-----------------------

GitHub is a website (a cloud platform).

It stores your Git repositories online.

It makes it easy to share code, collaborate with teams, and use Git on the internet.

It also has features like issues, pull requests, CI/CD, and project boards.

üëâ Example:
Git is like writing your notes in a notebook.
GitHub is like uploading that notebook online so your friends can read, edit, and add to it.


üîë Key Difference:
-----------------------

Git = Local tool (on your computer) for version control.

GitHub = Online platform that uses Git to share and collaborate.


‚ö° In short:
---------------

Git ‚Üí Version control system.

GitHub ‚Üí Hosting + collaboration platform for Git repositories.



how to work
--------------

you should be know create these TASKS::::
------------------------------------------------

** create an account in github
**create an organization
**create repo
**create team
**add team members to team
**provide access to the repo

onece these task completed then next task:::::
---------------------------------------------
** install git in your pc ( go to browse git download with supporting os )
** create one work space in your pc ( crete one new folder for git  example like name  git workspace )
** open the folder then click the right mouse botton choose open in terminal clik now terminal will be open check git version.


onece you install the git you need to set up the user name and email  using these commands
------------------------------------------------------------------------------------------------

**  git config --global user.name "Vinays9535"                   (git hub user name and email id)
** git config --global user.email "vinaykumars064@gmail.com"
** git config --list                                              this command shows your username and email
** git config --global --edit                                     this command is used for edit the user name and password



how can i get that repositories from remote repositories to local ( to my laptop)
---------------------------------------------------------------------------------------------

using git clone command get  repositories from remote to local

** git clone 
go to git hub copy the url 

example  ** git clone https://github.com/Vinays9535/ner-flask-.git

** dir       this command used to confirm the repositories is clone or not and shows the length name.
** cd "what shows the length name that name mention"
example  ** cd ner-flask-    just enter

** now go to vs code using this command in that vs code repositories was clone 
* code .       just enter.

**edit the cloned file in vs code and save it. 
then come to cli :::
(note :: this is git forword operation)
----------------------------------------

### onece we clone to remote repo to local repo the files should be go to working area in this area we do any editing, changing, adding etc, then check the status using "git status" command 
now dont show any status becuse git will not start tracking.
### then onece complited the work move the file working area to staging area using "git add ."  command then check the command git status using "git status" command 
now status will be show and git will be tracked.
### then move the file staging area to local repo and commit the changes in file using "git commit" command.
### then using "git log" commnad this command shows commit id,author,date.
### using "git log --oneline" this command is used to show details in one line.
### then using "git push" this command is using move the editing file local repo to remote repo or git repo.
### now go to git repo see the changes in the file what we are changed in the file.

** git status                                                         git status = check what‚Äôs going on in your repo.
** git add .  or git add <file name>                                  git add . = take all changes and get them ready for commit.
** git status                                                         git status = check what‚Äôs going on in your repo. 
** git commit -m "your messge"                                        using this command save changes locally
** git log                                                            this coomand used show full details and commit id 
** git log --oneline  (git log --oneline -2 or -3)                    this coomand used show short details and commit id 
** git push                                                           this command is used for move or pusg the editng file local repo to remote repo


(git riverse opration)
-------------------------

###  " git restore <file name>"  this command is used to undo changes in your working directory only.
### " git restore --staged <file name>   in this case alredy move the file working area to staging area but that file are needed some changes that time using this command,
      this command used to move the file staging area to working area. then check status using "git status" file came in to working area.
### " git reset <previous commit id not latest one>    in this case edited the file then move the file working area to staging area to local repo, but i did some mistakes
      in the file or still some changes are needing in that file soo i using the command file will move to local repo to staging area to working area. then check status.

### " git revert head "  this command used for undo from the remote repo.


** git remote -v

üëâ Shows the remote repositories linked to your local Git project, along with their fetch and push URLs.
Example output:
bash
Copy code
origin  https://github.com/user/repo.git (fetch)
origin  https://github.com/user/repo.git (push)
origin ‚Üí name of the remote (default name when you clone).
fetch ‚Üí URL used to pull changes from remote.
push ‚Üí URL used to push changes to remote.


git pull
--------------
to get the changes from remote repo in to your local repo we can use " git pull " command it will get the changes and do merge as well.

example:  in some cases other developer will push the code or creating the one more file or developer will change somthing in remote repo, 
          but not updating in my local repo,we need updating my local repo also that time using git pull command this.

in my case i creting one file in remote repo, then i come and see to local repo that time i created file will not showed in local repo that time i was
used git pull command then used this command once then saw my local repo that created file showed.




BRANCHES
----------

Branches let you work on new features or fixes without disturbing the main code.
They help in keeping code separate until it‚Äôs tested and ready.
Multiple people can work in parallel on different tasks.
Once finished, a branch can be merged into the main branch safely.
üëâ In short: Branches = safe workspace for new changes.

diffrent developers will be working on diffrent diffrent feauctres so clone the code local repo to main branch in remote repo then creating own branches then start working our own 
branches onece completing the work then push the branches to the remote repo.

how to create branches
-------------------------

** git branch                             it shows list of branches
** git branch branch-name                 this command used to creating a new branch
** git branch                             it shows list of branches
** git checkout branch-name               this command used  switch one branch to one branch
** git push -u origin branch-name         this command is used to Push branch to GitHub
** git branch -d branch-name              this command is used to Delete a branch (local)
** git push origin --delete branch-name   this command is used to Delete a branch from GitHub (remote)


HOW TO MERGE BRANCHES IN TO MAIN BRANCH
---------------------------------------------

üîπ Steps to merge using GitHub UI

Push your branch to GitHub
From your local CLI:

** git push -u origin branch-name


Open GitHub website ‚Üí Go to your repository.

At the top, GitHub will show a message like:
‚Äúbranch-name had recent pushes, compare & pull request‚Äù ‚Üí click Compare & pull request.

On the Pull Request page:

Make sure the base branch = main.

Compare branch = your branch.

Add a title and description (optional).

Click Create Pull Request.

On the next screen ‚Üí click Merge Pull Request.

Choose Confirm merge.

‚úÖ Done! Your branch is merged into main.






STAGE & SNAPSHOT
------------------------
Working with snapshots and the Git staging area
-----------------------------------------------------

* git status
show modified files in working directory, staged for your next commit

* git add [file]
add a file as it looks now to your next commit (stage)

* git reset [file]
unstage a file while retaining the changes in working directory

* git diff
diff of what is changed but not staged

* git diff --staged
diff of what is staged but not yet committed

* git commit -m ‚Äú[descriptive message]‚Äù
commit your staged content as a new commit snapshot



SETUP
Configuring user information used across all local repositories
-----------------------------------------------------------------------

* git config --global user.name ‚Äú[firstname lastname]‚Äù
set a name that is identifiable for credit when review version history

* git config --global user.email ‚Äú[valid-email]‚Äù
set an email address that will be associated with each history marker

* git config --global color.ui auto
set automatic command line coloring for Git for easy reviewing



BRANCH & MERGE
Isolating work in branches, changing context, and integrating changes
------------------------------------------------------------------------------

* git branch
list your branches. a * will appear next to the currently active branch

* git branch [branch-name]
create a new branch at the current commit

* git checkout
switch to another branch and check it out into your working directory

* git merge [branch]
merge the specified branch‚Äôs history into the current one

* git log
show all commits in the current branch‚Äôs history


SETUP & INIT
Configuring user information, initializing and cloning repositories
-------------------------------------------------------------------------

* git init
initialize an existing directory as a Git repository

* git clone [url]
retrieve an entire repository from a hosted location via URL


INSPECT & COMPARE
Examining logs, diffs and object information
-------------------------------------------------------

* git log
show the commit history for the currently active branch

* git log branchB..branchA
show the commits on branchA that are not on branchB

* git log --follow [file]
show the commits that changed file, even across renames

* git diff branchB...branchA
show the diff of what is in branchA that is not in branchB

* git show [SHA]
show any object in Git in human-readable format


TRACKING PATH CHANGES
Versioning file removes and path changes
---------------------------------------------------

git rm [file]
delete the file from project and stage the removal for commit

* git mv [existing-path] [new-path]
change an existing file path and stage the move

* git log --stat -M
show all commit logs with indication of any paths that moved


SHARE & UPDATE
Retrieving updates from another repository and updating local repos
------------------------------------------------------------------------

* git remote add [alias] [url]
add a git URL as an alias

* git fetch [alias]
fetch down all the branches from that Git remote

* git merge [alias]/[branch]
merge a remote branch into your current branch to bring it up to date

* git push [alias] [branch]
Transmit local branch commits to the remote repository branch

* git pull
fetch and merge any commits from the tracking remote branch


REWRITE HISTORY
Rewriting branches, updating commits and clearing history
----------------------------------------------------------------
* git rebase [branch]
apply any commits of current branch ahead of specified one

* git reset --hard [commit]
clear staging area, rewrite working tree from specified commit


TEMPORARY COMMITS
Temporarily store modified, tracked files in order to change branches
---------------------------------------------------------------------------

* git stash
Save modified and staged changes

* git stash list
list stack-order of stashed file changes

* git stash pop
write working from top of stash stack

* git stash drop
discard the changes from top of stash stack




üåü Git Best Practices (Start to End)
--------------------------------------------
---------------------------------------------


1. Setup and Configuration

Configure your user details (one time per system/repo):

git config --global user.name "Your Name"
git config --global user.email "your@email.com"


Use .gitignore to avoid committing unwanted files (logs, build files, secrets).

Use SSH keys or tokens for authentication.


2. Branching Strategy

Never work directly on main/master.

Create feature branches for every task/bug:

git checkout -b feature/task-name


Keep branch names meaningful:

feature/login-page

bugfix/payment-error

hotfix/security-patch



3. Making Changes

Make small, logical changes (avoid big bang commits).

Don‚Äôt commit half-done work; use stash if needed:

git stash



4. Writing Commits

Commit frequently, but with purpose.

Write clear commit messages:

<type>(scope): short description

Example:
feat(auth): add login API
fix(ui): resolve button alignment issue
docs(readme): update installation steps


Use git commit -m "message" for simple commits, or git commit for detailed messages.



5. Before Pushing

Always fetch latest changes:

git pull --rebase origin main


Resolve conflicts locally, not in GitHub UI.

Run tests/linters before pushing.



6. Pushing Changes

Push only your branch:

git push origin feature/task-name


Don‚Äôt force push (git push -f) unless necessary and team-approved.



7. Code Review & Pull Requests

Open a Pull Request (PR) to merge into main/develop.

Follow team‚Äôs PR template.

Keep PRs small, reviewable, and focused.

Request review from teammates.

Don‚Äôt merge your own PR without review.



8. Merging

Always merge using Pull Request (not directly).

Use Squash and Merge (recommended) to keep history clean.

Delete the branch after merging.



9. Maintaining Repo Health

Regularly prune old branches:

git fetch --prune


Keep main always stable and deployable.

Tag releases:

git tag -a v1.0.0 -m "First stable release"
git push origin v1.0.0



10. Collaboration Etiquette

Pull often to stay updated with teammates‚Äô work.

Communicate before force-pushing or rebasing shared branches.

Don‚Äôt commit secrets, passwords, or environment configs.



‚úÖ Summary:

* Configure Git properly.
* Use branching strategy.
* Commit small & clear changes.
* Pull before push.
* Always use PRs for merging.
* Keep repo clean, stable, and secure.

